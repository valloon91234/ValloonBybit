/* 
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILinearOrderApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel Active Order
        /// </summary>
        /// <remarks>
        /// This will cancel linear active order
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <returns>Object</returns>
        Object LinearOrderCancel(string orderId = null, string orderLinkId = null, string symbol = null);

        /// <summary>
        /// Cancel Active Order
        /// </summary>
        /// <remarks>
        /// This will cancel linear active order
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LinearOrderCancelWithHttpInfo(string orderId = null, string orderLinkId = null, string symbol = null);
        /// <summary>
        /// Cancel all active orders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>Object</returns>
        Object LinearOrderCancelAll(string symbol);

        /// <summary>
        /// Cancel all active orders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LinearOrderCancelAllWithHttpInfo(string symbol);
        /// <summary>
        /// Get linear Active Orders
        /// </summary>
        /// <remarks>
        /// This will get linear active orders
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="orderStatus"> (optional)</param>
        /// <returns>Object</returns>
        Object LinearOrderGetOrders(string orderId = null, string orderLinkId = null, string symbol = null, string order = null, int? page = null, int? limit = null, string orderStatus = null);

        /// <summary>
        /// Get linear Active Orders
        /// </summary>
        /// <remarks>
        /// This will get linear active orders
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="orderStatus"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LinearOrderGetOrdersWithHttpInfo(string orderId = null, string orderLinkId = null, string symbol = null, string order = null, int? page = null, int? limit = null, string orderStatus = null);
        /// <summary>
        /// Create Active Order
        /// </summary>
        /// <remarks>
        /// This will create linear order
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="side"> (optional)</param>
        /// <param name="orderType"> (optional)</param>
        /// <param name="timeInForce"> (optional)</param>
        /// <param name="qty"> (optional)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="takeProfit"> (optional)</param>
        /// <param name="stopLoss"> (optional)</param>
        /// <param name="reduceOnly"> (optional)</param>
        /// <param name="tpTriggerBy"> (optional)</param>
        /// <param name="slTriggerBy"> (optional)</param>
        /// <param name="closeOnTrigger"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <returns>Object</returns>
        Object LinearOrderNew(string symbol = null, string side = null, string orderType = null, string timeInForce = null, decimal? qty = null, decimal? price = null, decimal? takeProfit = null, decimal? stopLoss = null, bool? reduceOnly = null, string tpTriggerBy = null, string slTriggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null, int? positionIdx = null);

        /// <summary>
        /// Create Active Order
        /// </summary>
        /// <remarks>
        /// This will create linear order
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="side"> (optional)</param>
        /// <param name="orderType"> (optional)</param>
        /// <param name="timeInForce"> (optional)</param>
        /// <param name="qty"> (optional)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="takeProfit"> (optional)</param>
        /// <param name="stopLoss"> (optional)</param>
        /// <param name="reduceOnly"> (optional)</param>
        /// <param name="tpTriggerBy"> (optional)</param>
        /// <param name="slTriggerBy"> (optional)</param>
        /// <param name="closeOnTrigger"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LinearOrderNewWithHttpInfo(string symbol = null, string side = null, string orderType = null, string timeInForce = null, decimal? qty = null, decimal? price = null, decimal? takeProfit = null, decimal? stopLoss = null, bool? reduceOnly = null, string tpTriggerBy = null, string slTriggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null, int? positionIdx = null);
        /// <summary>
        /// Get Active Orders(real-time)
        /// </summary>
        /// <remarks>
        /// This will get linear active orders(real-time)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <returns>Object</returns>
        Object LinearOrderQuery(string symbol = null, string orderId = null, string orderLinkId = null);

        /// <summary>
        /// Get Active Orders(real-time)
        /// </summary>
        /// <remarks>
        /// This will get linear active orders(real-time)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LinearOrderQueryWithHttpInfo(string symbol = null, string orderId = null, string orderLinkId = null);
        /// <summary>
        /// Replace Active Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="pRQty"> (optional)</param>
        /// <param name="pRPrice"> (optional)</param>
        /// <returns>Object</returns>
        Object LinearOrderReplace(string symbol, string orderId = null, string orderLinkId = null, decimal? pRQty = null, decimal? pRPrice = null, decimal? takeProfit = null, decimal? stopLoss = null, string tpTriggerBy = null, string slTriggerBy = null);

        /// <summary>
        /// Replace Active Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="pRQty"> (optional)</param>
        /// <param name="pRPrice"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LinearOrderReplaceWithHttpInfo(string symbol, string orderId = null, string orderLinkId = null, decimal? pRQty = null, decimal? pRPrice = null, decimal? takeProfit = null, decimal? stopLoss = null, string tpTriggerBy = null, string slTriggerBy = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancel Active Order
        /// </summary>
        /// <remarks>
        /// This will cancel linear active order
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LinearOrderCancelAsync(string orderId = null, string orderLinkId = null, string symbol = null);

        /// <summary>
        /// Cancel Active Order
        /// </summary>
        /// <remarks>
        /// This will cancel linear active order
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LinearOrderCancelAsyncWithHttpInfo(string orderId = null, string orderLinkId = null, string symbol = null);
        /// <summary>
        /// Cancel all active orders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LinearOrderCancelAllAsync(string symbol);

        /// <summary>
        /// Cancel all active orders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LinearOrderCancelAllAsyncWithHttpInfo(string symbol);
        /// <summary>
        /// Get linear Active Orders
        /// </summary>
        /// <remarks>
        /// This will get linear active orders
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="orderStatus"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LinearOrderGetOrdersAsync(string orderId = null, string orderLinkId = null, string symbol = null, string order = null, string page = null, string limit = null, string orderStatus = null);

        /// <summary>
        /// Get linear Active Orders
        /// </summary>
        /// <remarks>
        /// This will get linear active orders
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="orderStatus"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LinearOrderGetOrdersAsyncWithHttpInfo(string orderId = null, string orderLinkId = null, string symbol = null, string order = null, string page = null, string limit = null, string orderStatus = null);
        /// <summary>
        /// Create Active Order
        /// </summary>
        /// <remarks>
        /// This will create linear order
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="side"> (optional)</param>
        /// <param name="orderType"> (optional)</param>
        /// <param name="timeInForce"> (optional)</param>
        /// <param name="qty"> (optional)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="takeProfit"> (optional)</param>
        /// <param name="stopLoss"> (optional)</param>
        /// <param name="reduceOnly"> (optional)</param>
        /// <param name="tpTriggerBy"> (optional)</param>
        /// <param name="slTriggerBy"> (optional)</param>
        /// <param name="closeOnTrigger"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LinearOrderNewAsync(string symbol = null, string side = null, string orderType = null, string timeInForce = null, decimal? qty = null, decimal? price = null, decimal? takeProfit = null, decimal? stopLoss = null, bool? reduceOnly = null, string tpTriggerBy = null, string slTriggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null, int? positionIdx = null);

        /// <summary>
        /// Create Active Order
        /// </summary>
        /// <remarks>
        /// This will create linear order
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="side"> (optional)</param>
        /// <param name="orderType"> (optional)</param>
        /// <param name="timeInForce"> (optional)</param>
        /// <param name="qty"> (optional)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="takeProfit"> (optional)</param>
        /// <param name="stopLoss"> (optional)</param>
        /// <param name="reduceOnly"> (optional)</param>
        /// <param name="tpTriggerBy"> (optional)</param>
        /// <param name="slTriggerBy"> (optional)</param>
        /// <param name="closeOnTrigger"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LinearOrderNewAsyncWithHttpInfo(string symbol = null, string side = null, string orderType = null, string timeInForce = null, decimal? qty = null, decimal? price = null, decimal? takeProfit = null, decimal? stopLoss = null, bool? reduceOnly = null, string tpTriggerBy = null, string slTriggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null, int? positionIdx = null);
        /// <summary>
        /// Get Active Orders(real-time)
        /// </summary>
        /// <remarks>
        /// This will get linear active orders(real-time)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LinearOrderQueryAsync(string symbol = null, string orderId = null, string orderLinkId = null);

        /// <summary>
        /// Get Active Orders(real-time)
        /// </summary>
        /// <remarks>
        /// This will get linear active orders(real-time)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LinearOrderQueryAsyncWithHttpInfo(string symbol = null, string orderId = null, string orderLinkId = null);
        /// <summary>
        /// Replace Active Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="pRQty"> (optional)</param>
        /// <param name="pRPrice"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LinearOrderReplaceAsync(string symbol, string orderId = null, string orderLinkId = null, decimal? pRQty = null, decimal? pRPrice = null, decimal? takeProfit = null, decimal? stopLoss = null, string tpTriggerBy = null, string slTriggerBy = null);

        /// <summary>
        /// Replace Active Order
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="pRQty"> (optional)</param>
        /// <param name="pRPrice"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LinearOrderReplaceAsyncWithHttpInfo(string symbol, string orderId = null, string orderLinkId = null, decimal? pRQty = null, decimal? pRPrice = null, decimal? takeProfit = null, decimal? stopLoss = null, string tpTriggerBy = null, string slTriggerBy = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LinearOrderApi : ILinearOrderApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LinearOrderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LinearOrderApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LinearOrderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LinearOrderApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancel Active Order This will cancel linear active order
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <returns>Object</returns>
        public Object LinearOrderCancel(string orderId = null, string orderLinkId = null, string symbol = null)
        {
            ApiResponse<Object> localVarResponse = LinearOrderCancelWithHttpInfo(orderId, orderLinkId, symbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Active Order This will cancel linear active order
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> LinearOrderCancelWithHttpInfo(string orderId = null, string orderLinkId = null, string symbol = null)
        {

            var localVarPath = "/private/linear/order/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarFormParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // form parameter
            if (orderLinkId != null) localVarFormParams.Add("order_link_id", this.Configuration.ApiClient.ParameterToString(orderLinkId)); // form parameter
            if (symbol != null) localVarFormParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // form parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", this.Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", this.Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinearOrderCancel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Cancel Active Order This will cancel linear active order
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LinearOrderCancelAsync(string orderId = null, string orderLinkId = null, string symbol = null)
        {
            ApiResponse<Object> localVarResponse = await LinearOrderCancelAsyncWithHttpInfo(orderId, orderLinkId, symbol);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel Active Order This will cancel linear active order
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LinearOrderCancelAsyncWithHttpInfo(string orderId = null, string orderLinkId = null, string symbol = null)
        {

            var localVarPath = "/private/linear/order/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarFormParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // form parameter
            if (orderLinkId != null) localVarFormParams.Add("order_link_id", this.Configuration.ApiClient.ParameterToString(orderLinkId)); // form parameter
            if (symbol != null) localVarFormParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // form parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", this.Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", this.Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinearOrderCancel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Cancel all active orders. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>Object</returns>
        public Object LinearOrderCancelAll(string symbol)
        {
            ApiResponse<Object> localVarResponse = LinearOrderCancelAllWithHttpInfo(symbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel all active orders. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> LinearOrderCancelAllWithHttpInfo(string symbol)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling LinearOrderApi->LinearOrderCancelAll");

            var localVarPath = "/private/linear/order/cancel-all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarFormParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // form parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", this.Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", this.Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinearOrderCancelAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Cancel all active orders. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LinearOrderCancelAllAsync(string symbol)
        {
            ApiResponse<Object> localVarResponse = await LinearOrderCancelAllAsyncWithHttpInfo(symbol);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel all active orders. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LinearOrderCancelAllAsyncWithHttpInfo(string symbol)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling LinearOrderApi->LinearOrderCancelAll");

            var localVarPath = "/private/linear/order/cancel-all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarFormParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // form parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", this.Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", this.Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinearOrderCancelAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get linear Active Orders This will get linear active orders
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="orderStatus"> (optional)</param>
        /// <returns>Object</returns>
        public Object LinearOrderGetOrders(string orderId = null, string orderLinkId = null, string symbol = null, string order = null, int? page = null, int? limit = null, string orderStatus = null)
        {
            ApiResponse<Object> localVarResponse = LinearOrderGetOrdersWithHttpInfo(orderId, orderLinkId, symbol, order, page, limit, orderStatus);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get linear Active Orders This will get linear active orders
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="orderStatus"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> LinearOrderGetOrdersWithHttpInfo(string orderId = null, string orderLinkId = null, string symbol = null, string order = null, int? page = null, int? limit = null, string orderStatus = null)
        {

            var localVarPath = "/private/linear/order/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_id", orderId)); // query parameter
            if (orderLinkId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_link_id", orderLinkId)); // query parameter
            if (symbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_status", orderStatus)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", this.Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", this.Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinearOrderGetOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get linear Active Orders This will get linear active orders
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="orderStatus"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LinearOrderGetOrdersAsync(string orderId = null, string orderLinkId = null, string symbol = null, string order = null, string page = null, string limit = null, string orderStatus = null)
        {
            ApiResponse<Object> localVarResponse = await LinearOrderGetOrdersAsyncWithHttpInfo(orderId, orderLinkId, symbol, order, page, limit, orderStatus);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get linear Active Orders This will get linear active orders
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="orderStatus"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LinearOrderGetOrdersAsyncWithHttpInfo(string orderId = null, string orderLinkId = null, string symbol = null, string order = null, string page = null, string limit = null, string orderStatus = null)
        {

            var localVarPath = "/private/linear/order/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_id", orderId)); // query parameter
            if (orderLinkId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_link_id", orderLinkId)); // query parameter
            if (symbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (orderStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_status", orderStatus)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", this.Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", this.Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinearOrderGetOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create Active Order This will create linear order
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="side"> (optional)</param>
        /// <param name="orderType"> (optional)</param>
        /// <param name="timeInForce"> (optional)</param>
        /// <param name="qty"> (optional)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="takeProfit"> (optional)</param>
        /// <param name="stopLoss"> (optional)</param>
        /// <param name="reduceOnly"> (optional)</param>
        /// <param name="tpTriggerBy"> (optional)</param>
        /// <param name="slTriggerBy"> (optional)</param>
        /// <param name="closeOnTrigger"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <returns>Object</returns>
        public Object LinearOrderNew(string symbol = null, string side = null, string orderType = null, string timeInForce = null, decimal? qty = null, decimal? price = null, decimal? takeProfit = null, decimal? stopLoss = null, bool? reduceOnly = null, string tpTriggerBy = null, string slTriggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null, int? positionIdx = null)
        {
            ApiResponse<Object> localVarResponse = LinearOrderNewWithHttpInfo(symbol, side, orderType, timeInForce, qty, price, takeProfit, stopLoss, reduceOnly, tpTriggerBy, slTriggerBy, closeOnTrigger, orderLinkId, positionIdx);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Active Order This will create linear order
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="side"> (optional)</param>
        /// <param name="orderType"> (optional)</param>
        /// <param name="timeInForce"> (optional)</param>
        /// <param name="qty"> (optional)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="takeProfit"> (optional)</param>
        /// <param name="stopLoss"> (optional)</param>
        /// <param name="reduceOnly"> (optional)</param>
        /// <param name="tpTriggerBy"> (optional)</param>
        /// <param name="slTriggerBy"> (optional)</param>
        /// <param name="closeOnTrigger"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> LinearOrderNewWithHttpInfo(string symbol = null, string side = null, string orderType = null, string timeInForce = null, decimal? qty = null, decimal? price = null, decimal? takeProfit = null, decimal? stopLoss = null, bool? reduceOnly = null, string tpTriggerBy = null, string slTriggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null, int? positionIdx = null)
        {

            var localVarPath = "/private/linear/order/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarFormParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // form parameter
            if (side != null) localVarFormParams.Add("side", this.Configuration.ApiClient.ParameterToString(side)); // form parameter
            if (orderType != null) localVarFormParams.Add("order_type", this.Configuration.ApiClient.ParameterToString(orderType)); // form parameter
            if (timeInForce != null) localVarFormParams.Add("time_in_force", this.Configuration.ApiClient.ParameterToString(timeInForce)); // form parameter
            if (qty != null) localVarFormParams.Add("qty", this.Configuration.ApiClient.ParameterToString(qty)); // form parameter
            if (price != null) localVarFormParams.Add("price", this.Configuration.ApiClient.ParameterToString(price)); // form parameter
            if (takeProfit != null) localVarFormParams.Add("take_profit", this.Configuration.ApiClient.ParameterToString(takeProfit)); // form parameter
            if (stopLoss != null) localVarFormParams.Add("stop_loss", this.Configuration.ApiClient.ParameterToString(stopLoss)); // form parameter
            if (reduceOnly != null) localVarFormParams.Add("reduce_only", this.Configuration.ApiClient.ParameterToString(reduceOnly)); // form parameter
            if (tpTriggerBy != null) localVarFormParams.Add("tp_trigger_by", this.Configuration.ApiClient.ParameterToString(tpTriggerBy)); // form parameter
            if (slTriggerBy != null) localVarFormParams.Add("sl_trigger_by", this.Configuration.ApiClient.ParameterToString(slTriggerBy)); // form parameter
            if (closeOnTrigger != null) localVarFormParams.Add("close_on_trigger", this.Configuration.ApiClient.ParameterToString(closeOnTrigger)); // form parameter
            if (orderLinkId != null) localVarFormParams.Add("order_link_id", this.Configuration.ApiClient.ParameterToString(orderLinkId)); // form parameter
            if (positionIdx != null) localVarFormParams.Add("position_idx", this.Configuration.ApiClient.ParameterToString(positionIdx)); // form parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", this.Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", this.Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinearOrderNew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Create Active Order This will create linear order
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="side"> (optional)</param>
        /// <param name="orderType"> (optional)</param>
        /// <param name="timeInForce"> (optional)</param>
        /// <param name="qty"> (optional)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="takeProfit"> (optional)</param>
        /// <param name="stopLoss"> (optional)</param>
        /// <param name="reduceOnly"> (optional)</param>
        /// <param name="tpTriggerBy"> (optional)</param>
        /// <param name="slTriggerBy"> (optional)</param>
        /// <param name="closeOnTrigger"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LinearOrderNewAsync(string symbol = null, string side = null, string orderType = null, string timeInForce = null, decimal? qty = null, decimal? price = null, decimal? takeProfit = null, decimal? stopLoss = null, bool? reduceOnly = null, string tpTriggerBy = null, string slTriggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null, int? positionIdx = null)
        {
            ApiResponse<Object> localVarResponse = await LinearOrderNewAsyncWithHttpInfo(symbol, side, orderType, timeInForce, qty, price, takeProfit, stopLoss, reduceOnly, tpTriggerBy, slTriggerBy, closeOnTrigger, orderLinkId, positionIdx);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Create Active Order This will create linear order
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="side"> (optional)</param>
        /// <param name="orderType"> (optional)</param>
        /// <param name="timeInForce"> (optional)</param>
        /// <param name="qty"> (optional)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="takeProfit"> (optional)</param>
        /// <param name="stopLoss"> (optional)</param>
        /// <param name="reduceOnly"> (optional)</param>
        /// <param name="tpTriggerBy"> (optional)</param>
        /// <param name="slTriggerBy"> (optional)</param>
        /// <param name="closeOnTrigger"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LinearOrderNewAsyncWithHttpInfo(string symbol = null, string side = null, string orderType = null, string timeInForce = null, decimal? qty = null, decimal? price = null, decimal? takeProfit = null, decimal? stopLoss = null, bool? reduceOnly = null, string tpTriggerBy = null, string slTriggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null, int? positionIdx = null)
        {

            var localVarPath = "/private/linear/order/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarFormParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // form parameter
            if (side != null) localVarFormParams.Add("side", this.Configuration.ApiClient.ParameterToString(side)); // form parameter
            if (orderType != null) localVarFormParams.Add("order_type", this.Configuration.ApiClient.ParameterToString(orderType)); // form parameter
            if (timeInForce != null) localVarFormParams.Add("time_in_force", this.Configuration.ApiClient.ParameterToString(timeInForce)); // form parameter
            if (qty != null) localVarFormParams.Add("qty", this.Configuration.ApiClient.ParameterToString(qty)); // form parameter
            if (price != null) localVarFormParams.Add("price", this.Configuration.ApiClient.ParameterToString(price)); // form parameter
            if (takeProfit != null) localVarFormParams.Add("take_profit", this.Configuration.ApiClient.ParameterToString(takeProfit)); // form parameter
            if (stopLoss != null) localVarFormParams.Add("stop_loss", this.Configuration.ApiClient.ParameterToString(stopLoss)); // form parameter
            if (reduceOnly != null) localVarFormParams.Add("reduce_only", this.Configuration.ApiClient.ParameterToString(reduceOnly)); // form parameter
            if (tpTriggerBy != null) localVarFormParams.Add("tp_trigger_by", this.Configuration.ApiClient.ParameterToString(tpTriggerBy)); // form parameter
            if (slTriggerBy != null) localVarFormParams.Add("sl_trigger_by", this.Configuration.ApiClient.ParameterToString(slTriggerBy)); // form parameter
            if (closeOnTrigger != null) localVarFormParams.Add("close_on_trigger", this.Configuration.ApiClient.ParameterToString(closeOnTrigger)); // form parameter
            if (orderLinkId != null) localVarFormParams.Add("order_link_id", this.Configuration.ApiClient.ParameterToString(orderLinkId)); // form parameter
            if (positionIdx != null) localVarFormParams.Add("position_idx", this.Configuration.ApiClient.ParameterToString(positionIdx)); // form parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", this.Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", this.Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinearOrderNew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get Active Orders(real-time) This will get linear active orders(real-time)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <returns>Object</returns>
        public Object LinearOrderQuery(string symbol = null, string orderId = null, string orderLinkId = null)
        {
            ApiResponse<Object> localVarResponse = LinearOrderQueryWithHttpInfo(symbol, orderId, orderLinkId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Active Orders(real-time) This will get linear active orders(real-time)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> LinearOrderQueryWithHttpInfo(string symbol = null, string orderId = null, string orderLinkId = null)
        {

            var localVarPath = "/private/linear/order/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_id", orderId)); // query parameter
            if (orderLinkId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_link_id", orderLinkId)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", this.Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", this.Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinearOrderQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get Active Orders(real-time) This will get linear active orders(real-time)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LinearOrderQueryAsync(string symbol = null, string orderId = null, string orderLinkId = null)
        {
            ApiResponse<Object> localVarResponse = await LinearOrderQueryAsyncWithHttpInfo(symbol, orderId, orderLinkId);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get Active Orders(real-time) This will get linear active orders(real-time)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LinearOrderQueryAsyncWithHttpInfo(string symbol = null, string orderId = null, string orderLinkId = null)
        {

            var localVarPath = "/private/linear/order/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_id", orderId)); // query parameter
            if (orderLinkId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_link_id", orderLinkId)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", this.Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", this.Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinearOrderQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Replace Active Order 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="pRQty"> (optional)</param>
        /// <param name="pRPrice"> (optional)</param>
        /// <returns>Object</returns>
        public Object LinearOrderReplace(string symbol, string orderId = null, string orderLinkId = null, decimal? pRQty = null, decimal? pRPrice = null, decimal? takeProfit = null, decimal? stopLoss = null, string tpTriggerBy = null, string slTriggerBy = null)
        {
            ApiResponse<Object> localVarResponse = LinearOrderReplaceWithHttpInfo(symbol, orderId, orderLinkId, pRQty, pRPrice, takeProfit, stopLoss, tpTriggerBy, slTriggerBy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Active Order 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="pRQty"> (optional)</param>
        /// <param name="pRPrice"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> LinearOrderReplaceWithHttpInfo(string symbol, string orderId = null, string orderLinkId = null, decimal? pRQty = null, decimal? pRPrice = null, decimal? takeProfit = null, decimal? stopLoss = null, string tpTriggerBy = null, string slTriggerBy = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling LinearOrderApi->LinearOrderReplace");

            var localVarPath = "/private/linear/order/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarFormParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // form parameter
            if (orderId != null) localVarFormParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // form parameter
            if (orderLinkId != null) localVarFormParams.Add("order_link_id", this.Configuration.ApiClient.ParameterToString(orderLinkId)); // form parameter
            if (pRQty != null) localVarFormParams.Add("p_r_qty", this.Configuration.ApiClient.ParameterToString(pRQty)); // form parameter
            if (pRPrice != null) localVarFormParams.Add("p_r_price", this.Configuration.ApiClient.ParameterToString(pRPrice)); // form parameter
            if (takeProfit != null) localVarFormParams.Add("take_profit", this.Configuration.ApiClient.ParameterToString(takeProfit)); // form parameter
            if (stopLoss != null) localVarFormParams.Add("stop_loss", this.Configuration.ApiClient.ParameterToString(stopLoss)); // form parameter
            if (tpTriggerBy != null) localVarFormParams.Add("tp_trigger_by", this.Configuration.ApiClient.ParameterToString(tpTriggerBy)); // form parameter
            if (slTriggerBy != null) localVarFormParams.Add("sl_trigger_by", this.Configuration.ApiClient.ParameterToString(slTriggerBy)); // form parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", this.Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", this.Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinearOrderReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Replace Active Order 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="pRQty"> (optional)</param>
        /// <param name="pRPrice"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LinearOrderReplaceAsync(string symbol, string orderId = null, string orderLinkId = null, decimal? pRQty = null, decimal? pRPrice = null, decimal? takeProfit = null, decimal? stopLoss = null, string tpTriggerBy = null, string slTriggerBy = null)
        {
            ApiResponse<Object> localVarResponse = await LinearOrderReplaceAsyncWithHttpInfo(symbol, orderId, orderLinkId, pRQty, pRPrice, takeProfit, stopLoss, tpTriggerBy, slTriggerBy);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Replace Active Order 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="orderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="pRQty"> (optional)</param>
        /// <param name="pRPrice"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LinearOrderReplaceAsyncWithHttpInfo(string symbol, string orderId = null, string orderLinkId = null, decimal? pRQty = null, decimal? pRPrice = null, decimal? takeProfit = null, decimal? stopLoss = null, string tpTriggerBy = null, string slTriggerBy = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling LinearOrderApi->LinearOrderReplace");

            var localVarPath = "/private/linear/order/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (symbol != null) localVarFormParams.Add("symbol", this.Configuration.ApiClient.ParameterToString(symbol)); // form parameter
            if (orderId != null) localVarFormParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // form parameter
            if (orderLinkId != null) localVarFormParams.Add("order_link_id", this.Configuration.ApiClient.ParameterToString(orderLinkId)); // form parameter
            if (pRQty != null) localVarFormParams.Add("p_r_qty", this.Configuration.ApiClient.ParameterToString(pRQty)); // form parameter
            if (pRPrice != null) localVarFormParams.Add("p_r_price", this.Configuration.ApiClient.ParameterToString(pRPrice)); // form parameter
            if (takeProfit != null) localVarFormParams.Add("take_profit", this.Configuration.ApiClient.ParameterToString(takeProfit)); // form parameter
            if (stopLoss != null) localVarFormParams.Add("stop_loss", this.Configuration.ApiClient.ParameterToString(stopLoss)); // form parameter
            if (tpTriggerBy != null) localVarFormParams.Add("tp_trigger_by", this.Configuration.ApiClient.ParameterToString(tpTriggerBy)); // form parameter
            if (slTriggerBy != null) localVarFormParams.Add("sl_trigger_by", this.Configuration.ApiClient.ParameterToString(slTriggerBy)); // form parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", this.Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", this.Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinearOrderReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
