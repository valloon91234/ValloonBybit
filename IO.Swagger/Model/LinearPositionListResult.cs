/* 
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LinearPositionListResult
    /// </summary>
    [DataContract]
    public partial class LinearPositionListResult :  IEquatable<LinearPositionListResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinearPositionListResult" /> class.
        /// </summary>
        /// <param name="bustPrice">bustPrice.</param>
        /// <param name="cumRealisedPnl">cumRealisedPnl.</param>
        /// <param name="entryPrice">entryPrice.</param>
        /// <param name="freeQty">freeQty.</param>
        /// <param name="leverage">leverage.</param>
        /// <param name="liqPrice">liqPrice.</param>
        /// <param name="occClosingFee">occClosingFee.</param>
        /// <param name="positionMargin">positionMargin.</param>
        /// <param name="positionValue">positionValue.</param>
        /// <param name="realisedPnl">realisedPnl.</param>
        /// <param name="side">side.</param>
        /// <param name="size">size.</param>
        /// <param name="symbol">symbol.</param>
        /// <param name="userId">userId.</param>
        /// <param name="tpSlMode">tpSlMode.</param>
        public LinearPositionListResult(double? bustPrice = default(double?), double? cumRealisedPnl = default(double?), double? entryPrice = default(double?), double? freeQty = default(double?), double? leverage = default(double?), double? liqPrice = default(double?), double? occClosingFee = default(double?), double? positionMargin = default(double?), double? positionValue = default(double?), double? realisedPnl = default(double?), string side = default(string), double? size = default(double?), string symbol = default(string), long? userId = default(long?), string tpSlMode = default(string))
        {
            this.BustPrice = bustPrice;
            this.CumRealisedPnl = cumRealisedPnl;
            this.EntryPrice = entryPrice;
            this.FreeQty = freeQty;
            this.Leverage = leverage;
            this.LiqPrice = liqPrice;
            this.OccClosingFee = occClosingFee;
            this.PositionMargin = positionMargin;
            this.PositionValue = positionValue;
            this.RealisedPnl = realisedPnl;
            this.Side = side;
            this.Size = size;
            this.Symbol = symbol;
            this.UserId = userId;
            this.TpSlMode = tpSlMode;
        }
        
        /// <summary>
        /// Gets or Sets BustPrice
        /// </summary>
        [DataMember(Name="bust_price", EmitDefaultValue=false)]
        public double? BustPrice { get; set; }

        /// <summary>
        /// Gets or Sets CumRealisedPnl
        /// </summary>
        [DataMember(Name="cum_realised_pnl", EmitDefaultValue=false)]
        public double? CumRealisedPnl { get; set; }

        /// <summary>
        /// Gets or Sets EntryPrice
        /// </summary>
        [DataMember(Name="entry_price", EmitDefaultValue=false)]
        public double? EntryPrice { get; set; }

        /// <summary>
        /// Gets or Sets FreeQty
        /// </summary>
        [DataMember(Name="free_qty", EmitDefaultValue=false)]
        public double? FreeQty { get; set; }

        /// <summary>
        /// Gets or Sets Leverage
        /// </summary>
        [DataMember(Name="leverage", EmitDefaultValue=false)]
        public double? Leverage { get; set; }

        /// <summary>
        /// Gets or Sets LiqPrice
        /// </summary>
        [DataMember(Name="liq_price", EmitDefaultValue=false)]
        public double? LiqPrice { get; set; }

        /// <summary>
        /// Gets or Sets OccClosingFee
        /// </summary>
        [DataMember(Name="occ_closing_fee", EmitDefaultValue=false)]
        public double? OccClosingFee { get; set; }

        /// <summary>
        /// Gets or Sets PositionMargin
        /// </summary>
        [DataMember(Name="position_margin", EmitDefaultValue=false)]
        public double? PositionMargin { get; set; }

        /// <summary>
        /// Gets or Sets PositionValue
        /// </summary>
        [DataMember(Name="position_value", EmitDefaultValue=false)]
        public double? PositionValue { get; set; }

        /// <summary>
        /// Gets or Sets RealisedPnl
        /// </summary>
        [DataMember(Name="realised_pnl", EmitDefaultValue=false)]
        public double? RealisedPnl { get; set; }

        /// <summary>
        /// Gets or Sets Side
        /// </summary>
        [DataMember(Name="side", EmitDefaultValue=false)]
        public string Side { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public double? Size { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public long? UserId { get; set; }

        /// <summary>
        /// Gets or Sets TpSlMode
        /// </summary>
        [DataMember(Name="tp_sl_mode", EmitDefaultValue=false)]
        public string TpSlMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LinearPositionListResult {\n");
            sb.Append("  BustPrice: ").Append(BustPrice).Append("\n");
            sb.Append("  CumRealisedPnl: ").Append(CumRealisedPnl).Append("\n");
            sb.Append("  EntryPrice: ").Append(EntryPrice).Append("\n");
            sb.Append("  FreeQty: ").Append(FreeQty).Append("\n");
            sb.Append("  Leverage: ").Append(Leverage).Append("\n");
            sb.Append("  LiqPrice: ").Append(LiqPrice).Append("\n");
            sb.Append("  OccClosingFee: ").Append(OccClosingFee).Append("\n");
            sb.Append("  PositionMargin: ").Append(PositionMargin).Append("\n");
            sb.Append("  PositionValue: ").Append(PositionValue).Append("\n");
            sb.Append("  RealisedPnl: ").Append(RealisedPnl).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  TpSlMode: ").Append(TpSlMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LinearPositionListResult);
        }

        /// <summary>
        /// Returns true if LinearPositionListResult instances are equal
        /// </summary>
        /// <param name="input">Instance of LinearPositionListResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinearPositionListResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BustPrice == input.BustPrice ||
                    (this.BustPrice != null &&
                    this.BustPrice.Equals(input.BustPrice))
                ) && 
                (
                    this.CumRealisedPnl == input.CumRealisedPnl ||
                    (this.CumRealisedPnl != null &&
                    this.CumRealisedPnl.Equals(input.CumRealisedPnl))
                ) && 
                (
                    this.EntryPrice == input.EntryPrice ||
                    (this.EntryPrice != null &&
                    this.EntryPrice.Equals(input.EntryPrice))
                ) && 
                (
                    this.FreeQty == input.FreeQty ||
                    (this.FreeQty != null &&
                    this.FreeQty.Equals(input.FreeQty))
                ) && 
                (
                    this.Leverage == input.Leverage ||
                    (this.Leverage != null &&
                    this.Leverage.Equals(input.Leverage))
                ) && 
                (
                    this.LiqPrice == input.LiqPrice ||
                    (this.LiqPrice != null &&
                    this.LiqPrice.Equals(input.LiqPrice))
                ) && 
                (
                    this.OccClosingFee == input.OccClosingFee ||
                    (this.OccClosingFee != null &&
                    this.OccClosingFee.Equals(input.OccClosingFee))
                ) && 
                (
                    this.PositionMargin == input.PositionMargin ||
                    (this.PositionMargin != null &&
                    this.PositionMargin.Equals(input.PositionMargin))
                ) && 
                (
                    this.PositionValue == input.PositionValue ||
                    (this.PositionValue != null &&
                    this.PositionValue.Equals(input.PositionValue))
                ) && 
                (
                    this.RealisedPnl == input.RealisedPnl ||
                    (this.RealisedPnl != null &&
                    this.RealisedPnl.Equals(input.RealisedPnl))
                ) && 
                (
                    this.Side == input.Side ||
                    (this.Side != null &&
                    this.Side.Equals(input.Side))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.TpSlMode == input.TpSlMode ||
                    (this.TpSlMode != null &&
                    this.TpSlMode.Equals(input.TpSlMode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BustPrice != null)
                    hashCode = hashCode * 59 + this.BustPrice.GetHashCode();
                if (this.CumRealisedPnl != null)
                    hashCode = hashCode * 59 + this.CumRealisedPnl.GetHashCode();
                if (this.EntryPrice != null)
                    hashCode = hashCode * 59 + this.EntryPrice.GetHashCode();
                if (this.FreeQty != null)
                    hashCode = hashCode * 59 + this.FreeQty.GetHashCode();
                if (this.Leverage != null)
                    hashCode = hashCode * 59 + this.Leverage.GetHashCode();
                if (this.LiqPrice != null)
                    hashCode = hashCode * 59 + this.LiqPrice.GetHashCode();
                if (this.OccClosingFee != null)
                    hashCode = hashCode * 59 + this.OccClosingFee.GetHashCode();
                if (this.PositionMargin != null)
                    hashCode = hashCode * 59 + this.PositionMargin.GetHashCode();
                if (this.PositionValue != null)
                    hashCode = hashCode * 59 + this.PositionValue.GetHashCode();
                if (this.RealisedPnl != null)
                    hashCode = hashCode * 59 + this.RealisedPnl.GetHashCode();
                if (this.Side != null)
                    hashCode = hashCode * 59 + this.Side.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.TpSlMode != null)
                    hashCode = hashCode * 59 + this.TpSlMode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
