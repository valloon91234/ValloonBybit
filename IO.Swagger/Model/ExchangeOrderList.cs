/* 
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Asset Exchange Records
    /// </summary>
    [DataContract]
    public partial class ExchangeOrderList :  IEquatable<ExchangeOrderList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeOrderList" /> class.
        /// </summary>
        /// <param name="fromCoin">fromCoin.</param>
        /// <param name="toCoin">toCoin.</param>
        /// <param name="fromAmount">fromAmount.</param>
        /// <param name="toAmount">toAmount.</param>
        /// <param name="exchangeRate">exchangeRate.</param>
        /// <param name="fromFee">fromFee.</param>
        /// <param name="createdAt">createdAt.</param>
        public ExchangeOrderList(string fromCoin = default(string), string toCoin = default(string), decimal? fromAmount = default(decimal?), decimal? toAmount = default(decimal?), decimal? exchangeRate = default(decimal?), decimal? fromFee = default(decimal?), string createdAt = default(string))
        {
            this.FromCoin = fromCoin;
            this.ToCoin = toCoin;
            this.FromAmount = fromAmount;
            this.ToAmount = toAmount;
            this.ExchangeRate = exchangeRate;
            this.FromFee = fromFee;
            this.CreatedAt = createdAt;
        }
        
        /// <summary>
        /// Gets or Sets FromCoin
        /// </summary>
        [DataMember(Name="from_coin", EmitDefaultValue=false)]
        public string FromCoin { get; set; }

        /// <summary>
        /// Gets or Sets ToCoin
        /// </summary>
        [DataMember(Name="to_coin", EmitDefaultValue=false)]
        public string ToCoin { get; set; }

        /// <summary>
        /// Gets or Sets FromAmount
        /// </summary>
        [DataMember(Name="from_amount", EmitDefaultValue=false)]
        public decimal? FromAmount { get; set; }

        /// <summary>
        /// Gets or Sets ToAmount
        /// </summary>
        [DataMember(Name="to_amount", EmitDefaultValue=false)]
        public decimal? ToAmount { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeRate
        /// </summary>
        [DataMember(Name="exchange_rate", EmitDefaultValue=false)]
        public decimal? ExchangeRate { get; set; }

        /// <summary>
        /// Gets or Sets FromFee
        /// </summary>
        [DataMember(Name="from_fee", EmitDefaultValue=false)]
        public decimal? FromFee { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExchangeOrderList {\n");
            sb.Append("  FromCoin: ").Append(FromCoin).Append("\n");
            sb.Append("  ToCoin: ").Append(ToCoin).Append("\n");
            sb.Append("  FromAmount: ").Append(FromAmount).Append("\n");
            sb.Append("  ToAmount: ").Append(ToAmount).Append("\n");
            sb.Append("  ExchangeRate: ").Append(ExchangeRate).Append("\n");
            sb.Append("  FromFee: ").Append(FromFee).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExchangeOrderList);
        }

        /// <summary>
        /// Returns true if ExchangeOrderList instances are equal
        /// </summary>
        /// <param name="input">Instance of ExchangeOrderList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExchangeOrderList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FromCoin == input.FromCoin ||
                    (this.FromCoin != null &&
                    this.FromCoin.Equals(input.FromCoin))
                ) && 
                (
                    this.ToCoin == input.ToCoin ||
                    (this.ToCoin != null &&
                    this.ToCoin.Equals(input.ToCoin))
                ) && 
                (
                    this.FromAmount == input.FromAmount ||
                    (this.FromAmount != null &&
                    this.FromAmount.Equals(input.FromAmount))
                ) && 
                (
                    this.ToAmount == input.ToAmount ||
                    (this.ToAmount != null &&
                    this.ToAmount.Equals(input.ToAmount))
                ) && 
                (
                    this.ExchangeRate == input.ExchangeRate ||
                    (this.ExchangeRate != null &&
                    this.ExchangeRate.Equals(input.ExchangeRate))
                ) && 
                (
                    this.FromFee == input.FromFee ||
                    (this.FromFee != null &&
                    this.FromFee.Equals(input.FromFee))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FromCoin != null)
                    hashCode = hashCode * 59 + this.FromCoin.GetHashCode();
                if (this.ToCoin != null)
                    hashCode = hashCode * 59 + this.ToCoin.GetHashCode();
                if (this.FromAmount != null)
                    hashCode = hashCode * 59 + this.FromAmount.GetHashCode();
                if (this.ToAmount != null)
                    hashCode = hashCode * 59 + this.ToAmount.GetHashCode();
                if (this.ExchangeRate != null)
                    hashCode = hashCode * 59 + this.ExchangeRate.GetHashCode();
                if (this.FromFee != null)
                    hashCode = hashCode * 59 + this.FromFee.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
